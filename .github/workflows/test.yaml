name: Test

on:
  pull_request:
  push: { branches: [master] }
  workflow_dispatch:

env:
  python_version: 3.8
jobs:
  unit_tests:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3.3.0
    - name: Setup NoisePy
      uses: ./.github/actions/setup
      with:
        python-version: ${{env.python_version}}
    - name: pytest
      run: PYTHONPATH=src pytest tests/.
  s0_download:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3.3.0
    - name: Setup NoisePy
      uses: ./.github/actions/setup
      with:
        python-version: ${{env.python_version}}
    - name: Test Download (S0)
      working-directory: ./src
      run: noisepy download --start 2019_02_01_00_00_00 --end 2019_02_01_01_00_00 --stations ARV,BAK --inc_hours 1 --path $RUNNER_TEMP
    - name: Cache data
      uses: actions/cache@v3
      with:
        key: download_data_2
        path: ${{runner.temp}}
  s1_s2:
    strategy:
      fail-fast: true
      matrix:
        method: [linear, robust, nroot, selective, auto_covariance, pws]
        freq_norm: [rma, no, phase_only]
    runs-on: ubuntu-22.04
    needs: s0_download
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3.3.0
    - name: Setup NoisePy
      uses: ./.github/actions/setup
      with:
        python-version: ${{env.python_version}}
    - name: Cache data
      uses: actions/cache@v3
      with:
        key: download_data_2
        path: ${{runner.temp}}
    - name: Test Cross-Correlation (S1)
      working-directory: ./src
      run: |
        noisepy cross_correlate --path $RUNNER_TEMP --freq_norm ${{matrix.freq_norm}}
    - name: Test Stacking (S2)
      working-directory: ./src
      run: |
        noisepy stack --path $RUNNER_TEMP --method ${{matrix.method}}
